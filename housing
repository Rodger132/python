import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import mean_absolute_error


roger= pd.read_csv('/content/Real estate.csv')
X = roger[["X1 transaction date", "X2 house age", "X3 distance to the nearest MRT station", "X4 number of convenience stores","X5 latitude","X6 longitude"]]
y = roger["Y house price of unit area"]

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(roger.head())

# Check the shape of the dataset
print("\nDataset shape:", roger.shape)

# Check the data types of columns
print("\nData types of columns:")
print(roger.dtypes)

# Summary statistics
print("\nSummary statistics of numerical columns:")
print(roger.describe())

# Check for missing values
print("\nMissing values:")
print(roger.isnull().sum())

# Bar charts for 'age' feature
plt.figure(figsize=(6, 4))
sns.countplot(x='X2 house age', data=roger)
plt.title('Bar Chart of age')
plt.show()

# Box plots for numerical features
plt.figure(figsize=(12, 9))
sns.boxplot(data=roger)
plt.show()
# Split the dataset into a training set and a test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)

# Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Create new data point
newdata = pd.DataFrame({
    "X1 transaction date": [2013],
    "X2 house age": [31.7],
    "X3 distance to the nearest MRT station": [6512.038],
    "X4 number of convenience stores": [1],
    "X5 latitude":[24.95095],
    "X6 longitude":[129.48458]

})

# Predictions on test set
predictions = model.predict(X_test)

# Calculate RMSE
rmse = np.sqrt(mean_squared_error(y_test, predictions))
print("Root Mean Squared Error (RMSE):", rmse)

# Display the Mean Squared Error (MSE)
mse = mean_squared_error(y_test, predictions)
print("Mean Squared Error (MSE):", mse)

# Calculate Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, predictions)
print("Mean Absolute Error (MAE):", mae)
